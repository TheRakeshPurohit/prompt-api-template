import * as fs from 'fs';
import * as path from 'path';
import { CliUx, Command, Flags } from '@oclif/core';
import { PackageInstance } from '@steamship/client';
import { getAuthedClient } from '../helpers/get-client.js';
import { getConfiguration } from '../wizards/get-config.js';
import { getPackage } from '../wizards/get-package.js';
export default class Run extends Command {
    static description = 'Runs a Steamship app';
    static examples = [
        `$ ship run --input input1.json
{ result: 'Hello, Steamship' }
`,
        `$ ship run --data "{\\"name\\": \\"Steamship\\"}"
{ result: 'Hello, Steamship' }
`
    ];
    static flags = {
        help: Flags.help({ char: 'h' }),
        input: Flags.string({ char: 'i', description: 'Input file to use as data input for an app' })
    };
    static args = [
        {
            name: 'instance',
            required: true,
            description: 'The package Instance.'
        }
    ];
    async run() {
        const { args, flags } = await this.parse(Run);
        const config = await getConfiguration({});
        const client = await getAuthedClient();
        const pkg = await getPackage({ config, client });
        let instance;
        try {
            const instanceRes = await PackageInstance.create(client, {
                packageId: pkg.id,
                handle: args.instanceHandle,
                fetchIfExists: true
            });
            if (!instanceRes.output) {
                CliUx.ux.error(`Package ID could not be loaded for package handle ${pkg.handle}`);
            }
            instance = instanceRes.output;
        }
        catch (e) {
            CliUx.ux.error(`Package ID could not be loaded for package handle ${pkg.handle}\n${e}`);
        }
        let body = flags.output ? JSON.parse(flags.output) : {};
        if (flags.input) {
            const inputFile = fs.readFileSync(path.join(process.cwd(), flags.input), 'utf-8');
            body = JSON.parse(inputFile);
        }
        const res = body.verb == 'POST'
            ? await instance.invoke(body.method, body.input, 'POST')
            : await instance.invoke(body.method, body.input, 'GET');
        console.log('Output:');
        console.log(JSON.stringify(res.output, undefined, 2));
        console.log('Expected output:');
        console.log(JSON.stringify(body.output, undefined, 2));
        CliUx.ux.action.stop();
    }
}
