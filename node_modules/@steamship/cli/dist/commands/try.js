import { CliUx, Command } from '@oclif/core';
import { getAuthedClient } from '../helpers/get-client.js';
import { Logo } from '../helpers/logo.js';
import { execDemo, selectDemo } from '../wizards/select-demo.js';
import { selectFromUrl, STARTER_PACKAGE_LIST, STARTER_PLUGIN_LIST } from '../wizards/select.js';
export default class Try extends Command {
    static description = 'Downloads a Jupyter demo of a Steamship Package or Plugin.';
    static examples = [`$ ship try <app-or-plugin-name>`];
    static args = [
        {
            name: 'handle',
            description: 'The package or plugin handle.'
        }
    ];
    async run() {
        const { args, flags } = await this.parse(Try);
        const { handle } = args;
        Logo();
        const client = await getAuthedClient();
        let packageOrPluginType = undefined;
        let packageOrPluginHandle = args.handle;
        let packageOrPluginChoice = undefined;
        if (packageOrPluginHandle) {
            const config = {
                providedHandle: handle,
                client
            };
            try {
                packageOrPluginChoice = await selectFromUrl({
                    url: STARTER_PACKAGE_LIST,
                    preSelected: packageOrPluginHandle,
                    requirePreselect: true,
                    recurse: true
                });
                packageOrPluginHandle = packageOrPluginChoice.id;
                packageOrPluginType = 'package';
            }
            catch (ex) {
                try {
                    packageOrPluginChoice = await selectFromUrl({
                        url: STARTER_PLUGIN_LIST,
                        preSelected: packageOrPluginHandle,
                        requirePreselect: true,
                        recurse: true,
                        prompt: ''
                    });
                    packageOrPluginHandle = packageOrPluginChoice.id;
                    packageOrPluginType = 'plugin';
                }
                catch (ex2) {
                    CliUx.ux.error(`Unable to find a package or plugin named: ${handle}`);
                    return;
                }
            }
        }
        else {
            packageOrPluginType = 'package';
            packageOrPluginChoice = await selectFromUrl({
                url: STARTER_PACKAGE_LIST,
                recurse: true,
                prompt: `Which package demo would you like?`,
                limitToPropertyNotNull: 'demos'
            });
            packageOrPluginHandle = packageOrPluginChoice.id;
            CliUx.ux.log(`‚ùØ ${packageOrPluginChoice.name}\n`);
        }
        if (packageOrPluginChoice['demos'] && Array.isArray(packageOrPluginChoice['demos'])) {
            const demos = packageOrPluginChoice['demos'];
            const demo = await selectDemo(packageOrPluginChoice.name, demos);
            await execDemo(demo);
        }
        else {
            CliUx.ux.error(`We're sorry, ${packageOrPluginType} ${packageOrPluginHandle} has no demos registered for launching via the CLI`);
            return;
        }
    }
}
