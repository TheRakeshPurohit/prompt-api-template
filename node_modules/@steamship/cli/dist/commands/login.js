import { CliUx, Command, Flags } from '@oclif/core';
import { DEFAULT_CONFIG, loadConfiguration, saveConfiguration } from '@steamship/client';
import { Logo } from '../helpers/logo.js';
import { attachTrailingSlash } from '../helpers/url-helpers.js';
import { doLogin, isLoggedIn } from '../wizards/login.js';
export default class Login extends Command {
    static description = 'Logs in to Steamship';
    static examples = [
        `$ ship login`,
        `$ ship login -t 1234-5678-9101-1121`,
        `$ ship login -s ${DEFAULT_CONFIG.apiBase} -a https://api.steamship.com`
    ];
    static flags = {
        api_domain: Flags.string({
            char: 'a',
            description: `The API domain to login to. Default is ${DEFAULT_CONFIG.apiBase}`
        }),
        site_domain: Flags.string({
            char: 's',
            description: `The site domain to login to. Default is ${DEFAULT_CONFIG.apiBase}`
        }),
        token: Flags.string({
            char: 't',
            description: `A previously generated API token to authenticate against.`
        })
    };
    static args = [];
    async run() {
        const { flags } = await this.parse(Login);
        let config = {};
        try {
            config = await loadConfiguration();
        }
        catch {
        }
        const apiDomain = flags.api_domain
            ? attachTrailingSlash(flags.api_domain)
            : config.apiBase || DEFAULT_CONFIG.apiBase;
        Logo();
        if (isLoggedIn(config)) {
            let doCont = await CliUx.ux.prompt('You are already logged in, would you still like to continue?', { default: 'y' });
            doCont = doCont.trim().toLowerCase();
            if (doCont != 'y') {
                CliUx.ux.log('Preserving existing login information.');
                return;
            }
        }
        if (flags.token && flags.token.trim().length == 0) {
            CliUx.ux.error(`'${flags.token}' is an invalid token - please give a valid token`);
        }
        if (flags.token) {
            const toSave = {
                apiBase: apiDomain,
                apiKey: flags.token.trim()
            };
            await saveConfiguration(toSave);
            CliUx.ux.log(`Logged in via token '${toSave.apiKey}' on domain ${toSave.apiBase} - please try 'ship info' to verify that your token works.`);
            return;
        }
        await doLogin({
            config,
            api_domain: flags.api_domain,
            site_domain: flags.site_domain
        });
    }
}
