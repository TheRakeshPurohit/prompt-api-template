/// <reference types="node" />
import { Command } from '@oclif/core';
interface SyncFile {
    url: string;
    local_path: string;
}
type CollisionChoice = 'skip' | 'overwrite' | 'propose';
export declare function getCollisionChoice(newFile: string, proposeFile: string): Promise<CollisionChoice>;
export default class SyncDocs extends Command {
    static description: string;
    static examples: string[];
    static flags: {
        help: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<void>;
        simulate: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        all: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined>;
    };
    static args: never[];
    exists(dest: string, file: SyncFile): boolean;
    copy(dest: string, file: SyncFile, remoteFile: Buffer): Promise<void>;
    syncFile(dest: string, file: SyncFile, simulate?: boolean, collisionChoice?: CollisionChoice): Promise<void>;
    syncFiles(dest: string, files: SyncFile[], simulate?: boolean, collisionChoice?: CollisionChoice): Promise<void>;
    run(): Promise<void>;
}
export {};
