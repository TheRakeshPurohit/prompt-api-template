import { CliUx, Command, Flags } from '@oclif/core';
import { getAuthedClient } from '../../helpers/get-client.js';
import { getProjectConfigWizard } from '../../wizards/get-project-config.js';
import { loadReadmeFile } from "../../helpers/project-config.js";
import { Package } from "@steamship/client";
export default class Update extends Command {
    static description = 'Updates a Steamship Package in the registry';
    static examples = ['ship package:update'];
    static flags = {
        help: Flags.help(),
        version: Flags.version()
    };
    static args = [];
    async run() {
        const { args, flags } = await this.parse(Update);
        const manifest = await getProjectConfigWizard({
            checkName: true,
            checkHandle: true,
            checkVersion: true,
            checkType: true,
            checkEntrypoint: true,
            checkPluginParams: true,
            willDeploy: true
        });
        if (manifest.type != 'package') {
            CliUx.ux.error('The package:update command must be run.js from the root folder of a Steamship Package project.');
        }
        CliUx.ux.log(`Updating Package ${manifest.handle}`);
        const description = manifest.description;
        const readme = loadReadmeFile();
        const client = await getAuthedClient();
        let resp;
        try {
            resp = await Package.get(client, { handle: manifest.handle });
            if ((!resp) || (!resp.output)) {
                CliUx.ux.error(`Unable to load package with handle ${manifest.handle}`);
            }
        }
        catch {
            CliUx.ux.error(`Unable to load package with handle ${manifest.handle}`);
        }
        const inst = resp.output;
        inst.readme = readme;
        inst.description = description;
        inst.profile = manifest;
        CliUx.ux.log(`Updating Package ${inst.handle}`);
        try {
            await inst.update();
        }
        catch (e) {
            console.log(e);
        }
        CliUx.ux.log(`Updated!`);
    }
}
