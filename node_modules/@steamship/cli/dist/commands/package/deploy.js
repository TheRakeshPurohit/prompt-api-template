import { CliUx, Command, Flags } from '@oclif/core';
import { bundlePackage } from '../../helpers/bundle-package.js';
import { getAuthedClient } from '../../helpers/get-client.js';
import { createPackageVersion } from '../../wizards/get-package-version.js';
import { createPackage } from '../../wizards/get-package.js';
import { getProjectConfigWizard } from '../../wizards/get-project-config.js';
import { loadReadmeFile, saveConfiguration } from "../../helpers/project-config.js";
import { PackageVersion } from "@steamship/client";
import { inc as incrementSemver } from "semver";
import { getAccount } from '../../helpers/account-api.js';
export default class Deploy extends Command {
    static description = 'Deploys a Steamship Package';
    static examples = ['ship package:deploy', `ship package:deploy --version <versionHandle>`];
    static flags = {
        help: Flags.help(),
        version: Flags.version()
    };
    static args = [];
    async run() {
        const { args, flags } = await this.parse(Deploy);
        const manifest = await getProjectConfigWizard({
            checkName: true,
            checkHandle: true,
            checkVersion: true,
            checkType: true,
            checkEntrypoint: true,
            checkPluginParams: true,
            willDeploy: true
        });
        if (manifest.type != 'package') {
            CliUx.ux.error('The package:deploy command must be run.js from the root folder of a Steamship Package project.');
        }
        CliUx.ux.log(`Deploying Package ${manifest.handle}`);
        const client = await getAuthedClient();
        await client.config;
        const readme = loadReadmeFile();
        let zipLocation = null;
        try {
            zipLocation = await bundlePackage();
        }
        catch (e) {
            CliUx.ux.error(e);
        }
        var pkg;
        try {
            pkg = await createPackage({
                client,
                handle: manifest.handle,
                public: manifest.public,
                description: manifest.description || '',
                readme: readme,
                profile: manifest,
                fetchIfExists: true
            });
        }
        catch (e) {
            CliUx.ux.warn(`Unable to create package. The package handle '${manifest.handle}' may already have been used by another user.\nPlease update yours in steamship.json and try again.`);
            process.exit(0);
        }
        const userInfo = await getAccount();
        if (pkg.userId != userInfo.id) {
            CliUx.ux.warn(`The package handle '${manifest.handle}' has already been used by another user.\nPlease update yours in steamship.json and try again.`);
            process.exit(0);
        }
        CliUx.ux.log(`Created/fetched Package ${pkg.handle}. Creating Version "${manifest.version}"`);
        let v;
        try {
            v = await PackageVersion.get(client, { packageId: pkg.id, handle: manifest.version });
        }
        catch {
        }
        if ((typeof v?.output != "undefined") && (v?.output != null)) {
            CliUx.ux.log(`\n**\n** You have already deployed version ${manifest.version} of this package.\n** `);
            const response = await CliUx.ux.confirm("Would you like to change the version and try again? [y/n]");
            if (response) {
                const incrementedVersionHandle = incrementSemver(manifest.version ?? "", 'prerelease', false, "rc");
                if (incrementedVersionHandle != null) {
                    var newVersionHandle = await CliUx.ux.prompt(`What would you like the new version handle to be? `, { default: incrementedVersionHandle });
                    manifest.version = newVersionHandle;
                    saveConfiguration(manifest);
                    CliUx.ux.log(`Updated steamship.json to version handle ${newVersionHandle}`);
                    await this.run();
                }
                else {
                    CliUx.ux.error("Could not increment existing version handle.  Exiting.");
                }
            }
        }
        else {
            try {
                const version = await createPackageVersion({
                    client,
                    handle: manifest.version,
                    package: pkg,
                    deploymentZipLocation: zipLocation,
                    configTemplate: manifest.configTemplate
                });
                const config = await client.config;
                const packageURL = `${config.webBase}packages/${manifest.handle}`;
                CliUx.ux.log(`Deployed new package version ${manifest.version}`);
                CliUx.ux.log(`**`);
                CliUx.ux.log(`** View and share your new package here: ${packageURL}`);
                CliUx.ux.log(`**`);
            }
            catch (e) {
                if (e.statusMessage) {
                    CliUx.ux.error(e.statusMessage);
                }
                else {
                    CliUx.ux.error(e);
                }
            }
        }
    }
}
