import { CliUx, Command, Flags } from '@oclif/core';
import { PackageVersion } from '@steamship/client';
import { getAuthedClient } from '../../../helpers/get-client.js';
import { showTable } from '../../../helpers/show-table.js';
import { getConfiguration } from '../../../wizards/get-config.js';
import { getPackage } from '../../../wizards/get-package.js';
function toList(a, d) {
    return [
        d.handle || '',
        d.isDefault === true ? 'Yes' : '',
        d.description || '',
        d.createdAt || ''
    ];
}
export default class List extends Command {
    static description = 'Lists the versions of an Package.';
    static examples = [
        'ship package:version:list',
        'ship package:version:list --package <packageHandle>'
    ];
    static flags = {
        package: Flags.string({ char: 'a', description: 'the Package handle' })
    };
    static args = [];
    async run() {
        const { args, flags } = await this.parse(List);
        const client = await getAuthedClient();
        const config = await getConfiguration({});
        const pkg = await getPackage({ client, config, providedHandle: flags.package });
        let versions;
        try {
            const request = await PackageVersion.list(client, { packageId: pkg.id });
            if (!request.output) {
                CliUx.ux.error('Could not retrieve version list from Steamship.');
                CliUx.ux.exit(-1);
            }
            versions = request.output?.packageVersions;
        }
        catch (e) {
            CliUx.ux.error(`Could not retrieve version list from Steamship.\n${e}`);
            CliUx.ux.exit(-1);
        }
        if (!versions || versions.length == 0) {
            CliUx.ux.info("You don't have any package versions yet.");
            CliUx.ux.info('Create one with:   ship deploy');
            CliUx.ux.exit();
        }
        showTable({
            title: `Versions of ${pkg.handle}`,
            headers: ['Handle', 'Default?', 'Description', 'Created At'],
            data: versions.map((version) => toList(pkg, version))
        });
    }
}
