import { CliUx, Command, Flags } from '@oclif/core';
import { getAuthedClient } from '../../../helpers/get-client.js';
import { getInvocationObject } from '../../../helpers/get-invocation-obj.js';
import { getConfiguration } from '../../../wizards/get-config.js';
import { getPackageInstance } from '../../../wizards/get-package-instance.js';
import { getPackage } from '../../../wizards/get-package.js';
export default class Invoke extends Command {
    static description = 'Invokes a method on an package instance.';
    static strict = false;
    static examples = [
        'ship package:instance:invoke --package hello-world --instance default --method greet --name "Ted"'
    ];
    static flags = {
        package: Flags.string({
            char: 'p',
            description: `The Package Handle`,
            required: false
        }),
        instance: Flags.string({
            char: 'i',
            description: `The Instance Handle`,
            required: false
        }),
        method: Flags.string({
            char: 'm',
            description: `The method to run`,
            required: false,
            default: '/'
        }),
        verb: Flags.string({
            char: 'v',
            description: `HTTP Verb. Either GET or POST. Defaults to POST.`,
            default: 'POST',
            required: false
        }),
        curl: Flags.boolean({
            char: 'c',
            description: `Display cURL command to invoke instead of calling.`,
            default: false,
            required: false
        })
    };
    static args = [];
    async run() {
        const { args, flags } = await this.parse(Invoke);
        const client = await getAuthedClient();
        const config = await getConfiguration({});
        const pkg = await getPackage({ client, config, providedHandle: flags.package });
        const instance = await getPackageInstance({
            client,
            config,
            package: pkg,
            providedHandle: flags.instance
        });
        const verb = flags.verb.toUpperCase();
        const remoteArgs = await getInvocationObject(Invoke);
        let response = null;
        if (flags.curl) {
            const url = await instance.invocationUrl(flags.method);
            if (verb == 'GET') {
                const queryString = Object.keys(remoteArgs)
                    .map((key) => key + '=' + remoteArgs[key])
                    .join('&');
                CliUx.ux.info(`
curl -XGET \\
  -H "Authorization: Bearer YOUR_API_KEY_HERE \\
  ${url}?${queryString}
`);
            }
            else if (verb == 'POST') {
                CliUx.ux.info(`
curl -XPOST \\
  -H "Authorization: Bearer YOUR_API_KEY_HERE \\
  -H "Content-Type: application/json" \\
  -d '${JSON.stringify(remoteArgs)}' \\
  ${url}
`);
            }
            else {
                CliUx.ux.error(`Unsupported HTTP verb: ${verb}. Please use either GET or POST. The default is POST. `);
            }
            CliUx.ux.exit();
        }
        if (verb == 'GET') {
            response = await instance.invoke(flags.method, remoteArgs, 'GET');
        }
        else if (verb == 'POST') {
            response = await instance.invoke(flags.method, remoteArgs);
        }
        else {
            CliUx.ux.error(`Unsupported HTTP verb: ${verb}. Please use either GET or POST. The default is POST. `);
        }
        if (response == null) {
            CliUx.ux.info('Empty Response.');
        }
        else {
            if (response.output) {
                if (typeof response.output == 'object') {
                    console.log(JSON.stringify(response.output, undefined, 2));
                }
                else {
                    console.log(response.output);
                }
            }
            else {
                console.log(response);
            }
        }
    }
}
