import { CliUx, Command, Flags } from '@oclif/core';
import { PackageInstance } from '@steamship/client';
import { getAuthedClient } from '../../../helpers/get-client.js';
import { showTable } from '../../../helpers/show-table.js';
import { getConfiguration } from '../../../wizards/get-config.js';
import { getPackage } from '../../../wizards/get-package.js';
function toList(d) {
    return [d.handle || '', d.description || '', d.createdAt || ''];
}
export default class List extends Command {
    static description = 'Lists the instances of an Package Version.';
    static examples = [
        'ship package:instance:list',
        'ship package:instance:list --package <packageHandle>'
    ];
    static flags = {
        package: Flags.string({ char: 'p', description: 'the Package handle' })
    };
    static args = [];
    async run() {
        const { args, flags } = await this.parse(List);
        const client = await getAuthedClient();
        const config = await getConfiguration({});
        const pkg = await getPackage({ client, config, providedHandle: flags.package });
        const request = await PackageInstance.list(client, { packageId: pkg.id });
        if (!request.output) {
            CliUx.ux.error('Could not retrieve version list from Steamship.');
        }
        const instances = request.output?.packageInstances;
        if (!instances || instances.length == 0) {
            CliUx.ux.info("You don't have any package instances yet.");
            CliUx.ux.info('Create one with:   ship package:instance:create');
            CliUx.ux.exit();
        }
        showTable({
            title: `Instances of ${pkg.handle}`,
            headers: ['Handle', 'Description', 'Created At'],
            data: instances.map((instance) => toList(instance))
        });
    }
}
