import { CliUx, Command, Flags } from '@oclif/core';
import { Steamship } from '@steamship/client';
import { createPackageInstanceOrExist } from '../../../helpers/create-instance.js';
import { requirePackageConfigOrExit } from '../../../helpers/project-config.js';
import { getConfiguration } from '../../../wizards/get-config.js';
import { getPackage } from '../../../wizards/get-package.js';
import { getInvocationObject } from "../../../helpers/get-invocation-obj.js";
export default class Create extends Command {
    static description = 'Creates an instance of a package.';
    static strict = false;
    static examples = ['ship package:instance:create'];
    static flags = {
        handle: Flags.string({ char: 'h', description: `Handle for the instance.`, required: false }),
        package: Flags.string({ char: 'p', description: `Package handle.`, required: false }),
        version: Flags.string({ char: 'v', description: `Package Version handle.`, required: false })
    };
    static args = [];
    async run() {
        const { args, flags } = await this.parse(Create);
        await requirePackageConfigOrExit();
        const client = new Steamship();
        const config = await getConfiguration({});
        const pkg = (await getPackage({ client, config, providedHandle: flags.package }));
        const configArgs = await getInvocationObject(Create);
        const instance = await createPackageInstanceOrExist(client, {
            packageOrPluginId: pkg.id,
            handle: flags.handle,
            versionHandle: flags.version,
            config: configArgs
        });
        CliUx.ux.info('');
        CliUx.ux.info('You can use the instance from the CLI via:');
        CliUx.ux.info(`   ship package:instance:run ${pkg.handle}/${instance.handle}/path/to/fn --arg1 val1 --arg2 val2 ..`);
    }
}
