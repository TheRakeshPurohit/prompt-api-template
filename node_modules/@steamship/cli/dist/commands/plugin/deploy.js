import { CliUx, Command, Flags } from '@oclif/core';
import { bundlePackage } from '../../helpers/bundle-package.js';
import { getAuthedClient } from '../../helpers/get-client.js';
import { createPluginVersion } from '../../wizards/get-plugin-version.js';
import { createPlugin } from '../../wizards/get-plugin.js';
import { getProjectConfigWizard } from '../../wizards/get-project-config.js';
import { loadReadmeFile, saveConfiguration } from "../../helpers/project-config.js";
import { PluginVersion } from "@steamship/client";
import { inc as incrementSemver } from "semver";
export default class Deploy extends Command {
    static description = 'Deploys a Steamship Plugin';
    static examples = ['ship plugin:deploy', `ship plugin:deploy --version <versionHandle>`];
    static flags = {
        help: Flags.help(),
        version: Flags.version()
    };
    static args = [];
    async run() {
        const { args, flags } = await this.parse(Deploy);
        const manifest = await getProjectConfigWizard({
            checkName: true,
            checkHandle: true,
            checkVersion: true,
            checkType: true,
            checkEntrypoint: true,
            checkPluginParams: true,
            willDeploy: true
        });
        if (manifest.type != 'plugin') {
            CliUx.ux.error('The plugin:deploy command must be run.js from the root folder of a Steamship Plugin project.');
        }
        CliUx.ux.log(`Deploying Plugin ${manifest.handle}`);
        const client = await getAuthedClient();
        await client.config;
        const readme = loadReadmeFile();
        let zipLocation = null;
        try {
            zipLocation = await bundlePackage();
        }
        catch (e) {
            CliUx.ux.error(e);
        }
        var plugin;
        try {
            plugin = await createPlugin({
                client,
                handle: manifest.handle,
                pluginType: manifest.plugin?.type,
                public: manifest.public,
                isTrainable: manifest.plugin?.isTrainable,
                description: manifest.description || '',
                trainingPlatform: manifest.plugin?.trainingPlatform,
                fetchIfExists: true,
                readme: readme,
                profile: manifest
            });
        }
        catch (e) {
            CliUx.ux.warn(`Unable to create plugin. The plugin handle '${manifest.handle}' may already have been used by another user.\nPlease update yours in steamship.json and try again.`);
            process.exit(0);
        }
        CliUx.ux.log(`Created/fetched Plugin ${plugin.handle}. Creating Version "${manifest.version}"`);
        CliUx.ux.log("Checking to see if it was an existing version issue.");
        let v;
        try {
            v = await PluginVersion.get(client, { pluginId: plugin.id, handle: manifest.version });
        }
        catch {
        }
        if ((typeof v?.output != "undefined") && (v?.output != null)) {
            CliUx.ux.log(`\n**\n** You have already deployed version ${manifest.version} of this plugin.\n** `);
            const response = await CliUx.ux.confirm("Would you like to change the version and try again? [y/n]");
            if (response) {
                const incrementedVersionHandle = incrementSemver(manifest.version ?? "", 'prerelease', false, "rc");
                if (incrementedVersionHandle != null) {
                    var newVersionHandle = await CliUx.ux.prompt(`What would you like the new version handle to be? `, { default: incrementedVersionHandle });
                    manifest.version = newVersionHandle;
                    saveConfiguration(manifest);
                    CliUx.ux.log(`Updated steamship.json to version handle ${newVersionHandle}`);
                    await this.run();
                }
                else {
                    CliUx.ux.error("Could not increment existing version handle.  Exiting.");
                }
            }
        }
        else {
            try {
                const version = await createPluginVersion({
                    client,
                    handle: manifest.version,
                    public: manifest.public,
                    pluginType: manifest.plugin?.type,
                    description: manifest.description || '',
                    configTemplate: manifest.configTemplate,
                    plugin,
                    deploymentZipLocation: zipLocation
                });
                const config = await client.config;
                const pluginURL = `${config.webBase}plugins/${manifest.handle}`;
                CliUx.ux.log(`Deployed new plugin version ${manifest.version}`);
                CliUx.ux.log(`**`);
                CliUx.ux.log(`** View and share your new plugin here: ${pluginURL}`);
                CliUx.ux.log(`**`);
            }
            catch (e) {
                CliUx.ux.warn(`Can't create a new version of ${plugin.handle}, and not because the version already exists.  This may be because you don't own it.`);
                process.exit(0);
            }
        }
    }
}
