import { CliUx, Command, Flags } from '@oclif/core';
import { Steamship } from '@steamship/client';
import { createPluginInstanceOrExist } from '../../../helpers/create-instance.js';
import { getConfiguration } from '../../../wizards/get-config.js';
import { getPlugin } from '../../../wizards/get-plugin.js';
export default class Create extends Command {
    static description = 'Creates an instance of the Plugin.';
    static examples = ['ship plugin:instance:create'];
    static flags = {
        handle: Flags.string({ char: 'h', description: `Handle for the instance.`, required: false }),
        plugin: Flags.string({ char: 'p', description: `Plugin handle.`, required: false }),
        version: Flags.string({ char: 'v', description: `Plugin Version handle.`, required: false })
    };
    static args = [];
    async run() {
        const { args, flags } = await this.parse(Create);
        const client = new Steamship();
        const config = await getConfiguration({});
        const plugin = (await getPlugin({ client, config, providedHandle: flags.plugin }));
        const instance = await createPluginInstanceOrExist(client, {
            packageOrPluginId: plugin.id,
            handle: flags.handle,
            versionHandle: flags.version
        });
        CliUx.ux.info('');
        CliUx.ux.info('You can use the instance from the CLI via:');
        CliUx.ux.info(`   ship plugin:instance:run ${plugin.handle}/${instance.handle}/path/to/fn --arg1 val1 --arg2 val2 ..`);
    }
}
