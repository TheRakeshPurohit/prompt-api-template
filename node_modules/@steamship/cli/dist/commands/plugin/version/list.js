import { CliUx, Command, Flags } from '@oclif/core';
import { PluginVersion, Steamship } from '@steamship/client';
import { showTable } from '../../../helpers/show-table.js';
import { getConfiguration } from '../../../wizards/get-config.js';
import { getPlugin } from '../../../wizards/get-plugin.js';
function toList(a, d) {
    return [
        d.handle || '',
        d.isDefault === true ? 'Yes' : '',
        d.description || '',
        d.createdAt || ''
    ];
}
export default class List extends Command {
    static description = 'Lists the versions of an Plugin.';
    static examples = ['ship plugin:version:list'];
    static flags = {
        plugin: Flags.string({ char: 'p', description: 'the plugin handle' })
    };
    static args = [];
    async run() {
        const { args, flags } = await this.parse(List);
        const client = new Steamship();
        const config = await getConfiguration({});
        const plugin = await getPlugin({ config, client, providedHandle: flags.plugin });
        const request = await PluginVersion.list(client, { pluginId: plugin.id });
        if (!request.output) {
            CliUx.ux.error('Could not retrieve version list from Steamship.');
        }
        const versions = request.output?.pluginVersions;
        if (!versions || versions.length == 0) {
            CliUx.ux.info("You don't have any plugin versions yet.");
            CliUx.ux.info('Create one with: ship deploy');
            CliUx.ux.exit();
        }
        showTable({
            title: `Versions of ${plugin.handle}`,
            headers: ['Handle', 'Default?', 'Description', 'Created At'],
            data: versions.map((version) => toList(plugin, version))
        });
    }
}
