import { CliUx, Command, Flags } from '@oclif/core';
import { Task, Workspace } from '@steamship/client';
import { getAuthedClient } from '../../helpers/get-client.js';
import { showTable } from '../../helpers/show-table.js';
import { getConfiguration } from '../../wizards/get-config.js';
function toList(d) {
    return [d.taskId || '', d.state || '', d.taskCreatedOn || '', d.taskLastModifiedOn || ''];
}
export default class List extends Command {
    static description = 'Lists tasks in the Steamship.';
    static examples = [
        'ship plugin:task:list',
        'ship plugin:task:list --state <succeeded|failed|waiting|running>',
        'ship plugin:task:list --space <spaceHandle>',
        'ship plugin:task:list --id <taskUuid>'
    ];
    static flags = {
        state: Flags.string({
            char: 't',
            description: `Task Status. succeeded|failed|waiting|running.`,
            required: false
        }),
        space: Flags.string({ char: 's', description: 'the Workspace handle' }),
        id: Flags.string({ char: 'i', description: 'the Task ID' })
    };
    static args = [];
    async run() {
        const { args, flags } = await this.parse(List);
        const client = await getAuthedClient();
        const config = await getConfiguration({});
        let workspaceId = undefined;
        if (flags.space) {
            const spaceResult = await Workspace.get(client, { handle: flags.space });
            if (!spaceResult.output) {
                CliUx.ux.error(`Unable to load workspace with handle '${flags.space}`);
                CliUx.ux.exit(-1);
            }
            else {
                workspaceId = spaceResult.output.id;
            }
        }
        const listR = await Task.list(client, {
            workspaceId: workspaceId,
            id: flags.id,
            state: flags.state
        });
        if (!listR.output) {
            CliUx.ux.error('Could not retrieve task list from Steamship.');
            CliUx.ux.exit(-1);
        }
        const tasks = listR.output?.tasks;
        if (!tasks || tasks.length == 0) {
            CliUx.ux.info('No tasks match your query.');
            CliUx.ux.exit();
        }
        showTable({
            title: `Tasks`,
            headers: ['ID', 'State', 'Created At', 'Updated At'],
            data: tasks.map((task) => toList(task))
        });
    }
}
