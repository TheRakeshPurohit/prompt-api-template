import * as fs from 'fs';
import { join } from 'path';
import { cwd } from 'process';
import { CliUx } from '@oclif/core';
import { getConfiguration } from '../wizards/get-config.js';
export const PROJECT_FILE = 'steamship.json';
export const README_FILE = 'README.md';
export function projectFilePath(folder) {
    return join(folder || cwd(), PROJECT_FILE);
}
export function readmeFilePath(folder) {
    return join(folder || cwd(), README_FILE);
}
export async function requirePackageConfigOrExit() {
    const filePath = projectFilePath();
    try {
        if (!fs.existsSync(filePath)) {
            CliUx.ux.info('Please run.js this command from within the root directory of a Steamship Package project.');
            CliUx.ux.info('You can create one with:');
            CliUx.ux.info('  ship create <name>');
            return;
        }
    }
    catch {
        CliUx.ux.error('Error checking for steamship.json file.');
    }
}
export function loadProjectFile(folder) {
    const configTxt = fs.readFileSync(projectFilePath(folder), 'utf8');
    const configJson = JSON.parse(configTxt);
    return configJson;
}
export function loadReadmeFile(folder) {
    try {
        return fs.readFileSync(readmeFilePath(folder), 'utf8');
    }
    catch {
        return "";
    }
}
export function saveConfiguration(configuration, folder) {
    try {
        const configJson = JSON.stringify(configuration, undefined, 2);
        fs.writeFileSync(projectFilePath(folder), configJson);
    }
    catch {
        CliUx.ux.error(`Unable to write ${projectFilePath(folder)}.`);
    }
}
export async function postCreateConfigSetup(folder, packageName) {
    const config = (await getConfiguration({
        folder,
        createOnMissing: true,
        autoCreateOnMissing: true,
        failOnMissing: true
    }));
    config.handle = packageName;
    if (!config.version) {
        config.version = '0.0.1';
    }
    await saveConfiguration(config, folder);
}
