import { CliUx } from '@oclif/core';
import { PackageInstance, PackageVersion, PluginInstance, PluginVersion } from '@steamship/client';
export async function createPackageInstanceOrExist(client, params) {
    let versionId = params.versionId;
    if (params.versionHandle) {
        const version = await PackageVersion.get(client, {
            packageId: params.packageOrPluginId,
            handle: params.versionHandle
        });
        versionId = version.output?.id;
    }
    try {
        const instance = await PackageInstance.create(client, {
            packageId: params.packageOrPluginId,
            packageVersionId: versionId,
            handle: params.handle,
            config: params.config
        });
        if (!instance.output) {
            CliUx.ux.error(`An empty instance was returned.`);
        }
        CliUx.ux.log(`Successfully created Package Instance with handle ${instance?.output?.handle}`);
        return instance.output;
    }
    catch (e) {
        CliUx.ux.error(`There was an error while creating the package instance. ${e}`);
    }
}
export async function createPluginInstanceOrExist(client, params) {
    let versionId = params.versionId;
    if (params.versionHandle) {
        const version = await PluginVersion.get(client, {
            pluginId: params.packageOrPluginId,
            handle: params.versionHandle
        });
        versionId = version.output?.id;
    }
    try {
        const instance = await PluginInstance.create(client, {
            pluginId: params.packageOrPluginId,
            pluginVersionId: versionId,
            handle: params.handle
        });
        if (!instance.output) {
            CliUx.ux.error(`An empty instance was returned.`);
        }
        CliUx.ux.log(`Successfully created Plugin Instance with handle ${instance?.output?.handle}`);
        return instance.output;
    }
    catch (e) {
        CliUx.ux.error(`There was an error while creating the plugin instance. ${e}`);
    }
}
