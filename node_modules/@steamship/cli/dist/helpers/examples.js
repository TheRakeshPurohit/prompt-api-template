import fs from 'fs';
import path from 'path';
import { Stream } from 'stream';
import { promisify } from 'util';
import got from 'got';
import tar from 'tar';
const pipeline = promisify(Stream.pipeline);
export async function isUrlOk(url) {
    const res = await got.head(url).catch((e) => e);
    return res.statusCode === 200;
}
export function getRepoInfoFromUrlString(repoUrl) {
    const parts = repoUrl.pathname.split('/');
    if (parts.length < 3) {
        throw Error(`Unable to parse URL: ${repoUrl}`);
    }
    else {
        parts.shift();
        const userName = parts.shift();
        const repoName = parts.shift();
        if (userName === undefined || repoName === undefined) {
            throw Error('username or repo name not found in URL');
        }
        let repoPath = parts.join('/');
        const parts2 = repoPath.split('#');
        repoPath = parts2[0];
        const branch = parts2.length > 1 ? parts2[2] : 'main';
        return { userName, repoName, branch, repoPath };
    }
}
export async function getGitHubRawFile(info, basePath) {
    const url = `https://raw.githubusercontent.com/${info.userName}/${info.repoName}/${info.branch}/${info.repoPath}`;
    const parts = info.repoPath.split('/');
    const filename = parts[parts.length - 1];
    const fullPath = path.join(basePath, filename);
    if (fs.existsSync(fullPath)) {
        throw Error(`File ${filename} already exists. Please rename or move it to download afresh.`);
    }
    const res = await got(url);
    if (res.statusCode !== 200) {
        throw Error(`Error fetching file ${url}.`);
    }
    fs.writeFileSync(fullPath, res.rawBody);
    return fullPath;
}
export async function getRepoInfo(url, examplePath) {
    const [, username, name, t, _branch, ...file] = url.pathname.split('/');
    const repoPath = examplePath ? examplePath.replace(/^\//, '') : file.join('/');
    if (t === undefined) {
        const infoResponse = await got(`https://api.github.com/repos/${username}/${name}`).catch((e) => e);
        if (infoResponse.statusCode !== 200) {
            return;
        }
        const info = JSON.parse(infoResponse.body);
        return { userName: username, repoName: name, branch: info['default_branch'], repoPath };
    }
    const branch = examplePath
        ? `${_branch}/${file.join('/')}`.replace(new RegExp(`/${repoPath}|/$`), '')
        : _branch;
    if (username && name && branch && t === 'tree') {
        return { userName: username, repoName: name, branch, repoPath };
    }
}
export function hasRepo({ userName, repoName, branch, repoPath }, checkFile = 'steamship.json') {
    const contentsUrl = `https://api.github.com/repos/${userName}/${repoName}/contents`;
    const packagePath = `${repoPath ? `/${repoPath}` : ''}/${checkFile}`;
    return isUrlOk(contentsUrl + packagePath + `?ref=${branch}`);
}
export function exampleCheckUrl(userName, repoName, branch, exampleRoot, checkFile = 'steamship.json') {
    const url = `https://api.github.com/repos/${encodeURIComponent(userName)}/${encodeURIComponent(repoName)}/contents/${exampleRoot}/${checkFile}`;
    return url;
}
export function hasExample(userName, repoName, branch, exampleRoot, checkFile = 'steamship.json') {
    const url = exampleCheckUrl(userName, repoName, branch, exampleRoot, checkFile);
    return isUrlOk(url);
}
export function gzipUrl(userName, repoName, branch) {
    return `https://codeload.github.com/${encodeURIComponent(userName)}/${encodeURIComponent(repoName)}/tar.gz/${branch}`;
}
export function downloadAndExtractRepo(root, { userName, repoName, branch, repoPath }) {
    return pipeline(got.stream(gzipUrl(userName, repoName, branch)), tar.extract({ cwd: root, strip: repoPath ? repoPath.split('/').length + 1 : 1 }, [
        `${repoName}-${branch}${repoPath ? `/${repoPath}` : ''}`
    ]));
}
export function downloadAndExtractExample(root, userName, repoName, branch, repoPath) {
    if (userName === '__internal-testing-retry') {
        throw new Error('This is an internal example for testing the CLI.');
    }
    const extractFolder = `${repoName}-${branch}`;
    return pipeline(got.stream(gzipUrl(userName, repoName, branch)), tar.extract({ cwd: root, strip: repoPath.split('/').length + 1 }, [
        `${extractFolder}/${repoPath}`
    ]));
}
