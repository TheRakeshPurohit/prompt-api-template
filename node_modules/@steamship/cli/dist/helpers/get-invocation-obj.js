import { Flags, Parser } from '@oclif/core';
export async function getInvocationObject(oclifCmd) {
    const newFlagSpec = {};
    for (const item of process.argv) {
        if (item.indexOf('--') == 0) {
            const flag = item.slice(2);
            newFlagSpec[flag.split('=')[0]] = Flags.string();
        }
    }
    const newParse = await Parser.parse(process.argv, { flags: newFlagSpec, strict: false });
    const newFlags = newParse.flags;
    const remoteArgs = {};
    for (const key in newFlags) {
        if (typeof oclifCmd.flags[key] == 'undefined') {
            const val = newFlags[key];
            if (val.toLowerCase() == 'false') {
                remoteArgs[key] = false;
            }
            else if (val.toLowerCase() == 'true') {
                remoteArgs[key] = true;
            }
            else if (!isNaN(parseInt(val))) {
                const fVal = parseFloat(val);
                const iVal = parseInt(val);
                if (iVal == fVal) {
                    remoteArgs[key] = iVal;
                }
                else {
                    remoteArgs[key] = fVal;
                }
            }
            else {
                remoteArgs[key] = val;
            }
        }
    }
    return remoteArgs;
}
