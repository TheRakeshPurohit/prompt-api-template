import path from 'path';
import { CliUx } from '@oclif/core';
import { getProjectName } from '../wizards/get-project-name.js';
import { getTemplateWizard } from '../wizards/get-template.js';
import { tryGitInitInDir } from './git.js';
import { isFolderEmpty } from './is-folder-empty.js';
import { isWriteable } from './is-writeable.js';
import { makeDir } from './make-dir.js';
import { displayPostInstallInstructions, PackageType } from './package-types.js';
import { postCreateConfigSetup } from './project-config.js';
import { Template, TemplateType } from './url-helpers.js';
export async function installPackageTemplate(parentDirectory, providedPackageName, templateName) {
    const resolvedTemplateName = await getTemplateWizard(templateName);
    const parts = resolvedTemplateName.split('/');
    const proposedName = parts[parts.length - 1];
    let appName = await getProjectName({
        provided: providedPackageName,
        suggested: proposedName
    });
    if (!appName || appName.trim() === '') {
        CliUx.ux.error('The given package name cannot be empty');
    }
    appName = appName.trim();
    if (!parentDirectory || parentDirectory.trim() === '') {
        CliUx.ux.error('Internal error: Parent directory for package is invalid (empty string)');
    }
    const appDirectory = path.join(parentDirectory, appName);
    if (!(await isWriteable(path.dirname(appDirectory)))) {
        CliUx.ux.error('The application path is not writable, please check folder permissions and try again.\n' +
            'It is likely you do not have write permissions for this folder.');
    }
    await makeDir(appDirectory);
    if (!isFolderEmpty(appDirectory, appName)) {
        CliUx.ux.error('The package folder was not empty');
    }
    const templateRef = new Template(resolvedTemplateName);
    await templateRef.prepare();
    try {
        if (templateRef.type == TemplateType.GitHub) {
            await templateRef.downloadGitRepo(appDirectory);
        }
        else if (templateRef.type == TemplateType.Name ||
            templateRef.type == TemplateType.DeepGithub) {
            await templateRef.downloadExample(appDirectory);
        }
    }
    catch (reason) {
        CliUx.ux.info(reason);
        function isErrorLike(err) {
            return (typeof err === 'object' &&
                err !== null &&
                typeof err.message === 'string');
        }
        CliUx.ux.error(isErrorLike(reason) ? reason.message : reason);
    }
    try {
        setupPackage(appDirectory, appName);
    }
    catch (e) {
        CliUx.ux.error(e);
    }
    displayPostInstallInstructions(appName, appDirectory, PackageType.Unknown);
    return appDirectory;
}
export async function setupPackage(appDirectory, appName) {
    CliUx.ux.log('Finishing package setup...');
    if (tryGitInitInDir(appDirectory)) {
        CliUx.ux.log('- Initialized a git repository.');
    }
    else {
        CliUx.ux.log('- Skipped git setup because of existing repository.');
    }
    CliUx.ux.log('- Configuring steamship.json');
    postCreateConfigSetup(appDirectory, appName);
}
