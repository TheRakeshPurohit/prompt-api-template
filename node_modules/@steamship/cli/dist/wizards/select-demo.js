import { CliUx } from '@oclif/core';
import chalk from 'chalk';
import { getGitHubRawFile, getRepoInfoFromUrlString } from '../helpers/examples.js';
import { selectFromJson } from './select.js';
function notEmpty(value) {
    return value !== null && value !== undefined;
}
function choiceForDemo(demo, id) {
    let name = '';
    let description = '';
    switch (demo.type) {
        case 'jupyter':
            description = 'Jupyter Notebook';
            switch (demo.language) {
                case 'python':
                    name = 'Python Client Demo';
                    break;
                case 'http':
                    name = 'HTTP Client Demo';
                    break;
                default:
                    return null;
            }
            break;
        case 'web':
            description = 'Steamlit';
            name = 'Web Demo';
            break;
        default:
            return null;
    }
    return { id, name, description, url: demo.url };
}
export async function execDemo(demo) {
    if (!demo.url) {
        CliUx.ux.error(`No URL found for demo type: ${demo.type}`);
    }
    switch (demo.type) {
        case 'jupyter':
            const repoInfo = getRepoInfoFromUrlString(new URL(demo.url));
            try {
                const downloadPath = await getGitHubRawFile(repoInfo, process.cwd());
                const parts = downloadPath.split('/');
                const filename = parts[parts.length - 1];
                CliUx.ux.log(`Downloaded Jupyter demo to:`);
                CliUx.ux.log(`    ${filename}\n`);
                CliUx.ux.log(`Open by running:`);
                CliUx.ux.log(`    jupyter-notebook ${filename}\n`);
            }
            catch (ex) {
                if (`${ex}`.indexOf('already exists') > -1) {
                    const parts = repoInfo.repoPath.split('/');
                    const filename = parts[parts.length - 1];
                    CliUx.ux.log(`Example file appears to already exist:`);
                    CliUx.ux.log(`    ${filename}\n`);
                    CliUx.ux.log(`Open by running:`);
                    CliUx.ux.log(`    jupyter-notebook ${filename}\n`);
                    CliUx.ux.log(`Or, to download anew, move or rename it and try again.`);
                }
                else {
                    throw ex;
                }
            }
            break;
        case 'web':
            CliUx.ux.log(`A web demo is available at:`);
            CliUx.ux.log(`    ${demo.url}`);
            CliUx.ux.log(``);
            try {
                await CliUx.ux.anykey(`Press any key to open, or ${chalk.yellow('q')} to cancel`);
                await CliUx.ux.open(demo.url);
            }
            catch (e) {
                CliUx.ux.log('Ending login process. See `ship login --help` for more info.');
                return;
            }
            break;
        default:
            CliUx.ux.error(`No implementation for demo type: ${demo.type}`);
    }
}
export async function selectDemo(title, demos) {
    if (demos.length == 1) {
        return demos[0];
    }
    const choices = demos.map((demo, idx) => {
        return choiceForDemo(demo, `${idx}`);
    });
    const filteredChoices = choices.filter(notEmpty);
    const choiceTree = {
        prompt: `Which ${title} demo would you like?`,
        choices: filteredChoices
    };
    const choice = await selectFromJson({ tree: choiceTree });
    if (typeof choice.id == 'undefined') {
        CliUx.ux.error('Selected demo ID was undefined');
    }
    CliUx.ux.log(`‚ùØ ${choice.name}\n`);
    const choiceIdx = parseInt(choice.id);
    return demos[choiceIdx];
}
