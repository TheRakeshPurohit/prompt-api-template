import { CliUx } from '@oclif/core';
import { Plugin } from '@steamship/client';
import { getHandle } from './get-handle.js';
export async function getPlugin(params) {
    const handle = await getHandle({
        provided: params.providedHandle,
        config: params.config,
        type: 'plugin'
    });
    const obj = (await Plugin.get(params.client, {
        handle: handle
    })).output;
    if (!obj) {
        CliUx.ux.error('Unable to load plugin');
        CliUx.ux.exit(-1);
    }
    return obj;
}
export async function createPlugin(params) {
    try {
        const p = await Plugin.get(params.client, { handle: params.handle });
        if (p && p.output) {
            p.output.description = params.description;
            p.output.readme = params.readme;
            p.output.profile = params.profile;
            const saved = await p.output.update();
            if (saved && saved.output) {
                return saved.output;
            }
        }
    }
    catch {
    }
    const plugin = (await Plugin.create(params.client, {
        handle: params.handle,
        fetchIfExists: params.fetchIfExists,
        type: params.pluginType || params.plugin?.type,
        isPublic: params.public,
        isTrainable: params.isTrainable,
        trainingPlatform: params.trainingPlatform,
        transport: 'jsonOverHttp',
        description: params.description,
    })).output;
    if (!plugin) {
        CliUx.ux.error(`Plugin ID could not be created/loaded (handle=${params.handle})`);
        CliUx.ux.exit(-1);
    }
    if (!plugin.id) {
        CliUx.ux.error(`Plugin ID could not be loaded for plugin handle ${params.handle}`);
    }
    return plugin;
}
