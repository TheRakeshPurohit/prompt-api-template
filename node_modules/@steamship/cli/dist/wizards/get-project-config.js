import { CliUx } from '@oclif/core';
import { PROJECT_FILE, saveConfiguration } from '../helpers/project-config.js';
import { getConfiguration } from './get-config.js';
import { getPluginType } from './get-plugin-type.js';
import { selectProject } from './select.js';
async function pluginConfigCheck(params, config) {
    const pluginConfig = config.plugin || {};
    if (!pluginConfig.type) {
        pluginConfig.type = (await getPluginType());
    }
    if (!pluginConfig.transport) {
        pluginConfig.transport = 'jsonOverHttp';
    }
    config.plugin = pluginConfig;
    return config;
}
export async function getProjectConfigWizard(params) {
    params = params || {};
    let config = (await getConfiguration({ autoCreateOnMissing: true, failOnMissing: true }));
    if (config.type == 'project' && params.willDeploy) {
        CliUx.ux.warn(`The type field in ${PROJECT_FILE} is set to 'project'`);
        CliUx.ux.warn("We currently only support deploying 'package' and 'plugin' types.");
        let doChange = await CliUx.ux.prompt('Would you like to change it?', { default: 'n' });
        doChange = doChange.trim().toLowerCase();
        if (doChange != 'y') {
            CliUx.ux.error('Canceling deployment.');
        }
        config.type = (await selectProject({ limitOptions: ['package', 'plugin'], recurse: false }))
            .id;
        saveConfiguration(config);
    }
    else if (!config.type && params.willDeploy) {
        config.type = (await selectProject({
            preSelected: config.type,
            limitOptions: ['package', 'plugin'],
            recurse: false
        })).id;
        saveConfiguration(config);
    }
    else if (!config.type) {
        config.type = (await selectProject({
            preSelected: config.type,
            limitOptions: ['package', 'plugin', 'project'],
            recurse: false
        })).id;
        saveConfiguration(config);
    }
    if (params.checkHandle && (!config.handle || config.handle === "my-prompt-package")) {
        var newHandle = "";
        const handleRegex = /^[a-z\-]+$/g;
        while (!newHandle.match(handleRegex)) {
            newHandle = await CliUx.ux.prompt('Please enter a handle for your package or plugin');
            if (!newHandle.match(handleRegex)) {
                CliUx.ux.log('Sorry, valid characters for handles are [a-z] and -');
            }
        }
        config.handle = newHandle;
        await saveConfiguration(config);
    }
    if (config.type == 'package' || config.type == 'plugin') {
        if (params.checkVersion && !config.version) {
            config.version = await CliUx.ux.prompt('Package version');
            config.version = config.version || '1.0.0';
            saveConfiguration(config);
        }
    }
    if (config.type == 'package' || config.type == 'plugin') {
        if (params.checkEntrypoint && !config.entrypoint) {
            CliUx.ux.info(`Your entrypoint is the python path to your handler object.`);
            config.entrypoint = await CliUx.ux.prompt('Entrypoint', { default: 'src.api.handler' });
            saveConfiguration(config);
        }
    }
    if (config.type == 'plugin' && params.checkPluginParams) {
        config = await pluginConfigCheck(params, config);
        saveConfiguration(config);
    }
    return config;
}
