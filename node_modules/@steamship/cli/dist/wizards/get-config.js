import fs from 'fs';
import { CliUx } from '@oclif/core';
import { loadProjectFile, PROJECT_FILE, projectFilePath } from '../helpers/project-config.js';
export async function ensureProjectFile(params) {
    const filePath = projectFilePath(params.folder);
    try {
        if (fs.existsSync(filePath)) {
            return true;
        }
        else {
            let doCreate = 'n';
            if (params.autoCreateOnMissing === true) {
                doCreate = 'y';
            }
            else if (params.createOnMissing === true) {
                doCreate = await CliUx.ux.prompt('No Steamship Package configuration file exists in this directory. Would you like to create one?', { default: 'y' });
                doCreate = doCreate.trim().toLowerCase();
            }
            if (doCreate != 'y') {
                if (params.failOnMissing === true) {
                    CliUx.ux.error(`A project file is required to continue.`);
                    CliUx.ux.exit(-1);
                }
                else {
                    return false;
                }
            }
            try {
                fs.writeFileSync(filePath, '{}');
                return true;
            }
            catch (err) {
                CliUx.ux.error(`There was an error creating ${PROJECT_FILE}. ${err}`);
                CliUx.ux.exit(-1);
                return false;
            }
        }
    }
    catch (err) {
        CliUx.ux.error(`There was an error checking ${PROJECT_FILE}. ${err}`);
        CliUx.ux.exit(-1);
        return false;
    }
}
export async function getConfiguration(params) {
    const configExists = ensureProjectFile(params);
    if (!configExists) {
        if (params.failOnMissing) {
            CliUx.ux.error(`Please create a configuration file called ${PROJECT_FILE} before continuing.`);
            CliUx.ux.exit(-1);
            return undefined;
        }
        else {
            return undefined;
        }
    }
    try {
        const configuration = loadProjectFile(params.folder);
        return configuration;
    }
    catch {
        CliUx.ux.error(`Unable to read ${PROJECT_FILE}. Please ensure it is a valid JSON file.`);
        CliUx.ux.exit(-1);
        return undefined;
    }
}
