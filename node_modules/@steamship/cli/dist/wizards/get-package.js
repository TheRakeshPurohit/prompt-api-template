import { CliUx } from '@oclif/core';
import { Package } from '@steamship/client';
import { getHandle } from './get-handle.js';
export async function getPackage(params) {
    const handle = await getHandle({
        provided: params.providedHandle,
        config: params.config,
        type: 'package'
    });
    if (!handle) {
        CliUx.ux.error('Unable to load package without an package handle.');
        CliUx.ux.exit(-1);
    }
    try {
        const pkg = (await Package.get(params.client, {
            handle: handle
        })).output;
        if (!pkg) {
            CliUx.ux.error('Unable to load app');
            CliUx.ux.exit(-1);
        }
        return pkg;
    }
    catch (e) {
        CliUx.ux.error(`Unable to load package details.\n${e}`);
        CliUx.ux.exit(-1);
    }
}
export async function createPackage(params) {
    try {
        const p = await Package.get(params.client, { handle: params.handle });
        if (p && p.output) {
            p.output.description = params.description;
            p.output.readme = params.readme;
            p.output.profile = params.profile;
            const saved = await p.output.update();
            if (saved && saved.output) {
                return saved.output;
            }
        }
    }
    catch {
    }
    const pkg = (await Package.create(params.client, {
        handle: params.handle,
        isPublic: params.public,
        description: params.description || '',
        readme: params.readme,
        profile: params.profile,
        fetchIfExists: params.fetchIfExists
    })).output;
    if (!pkg) {
        CliUx.ux.error(`Package ID could not be created/loaded (handle=${params.handle})`);
        CliUx.ux.exit(-1);
    }
    if (!pkg.id) {
        CliUx.ux.error(`Package ID could not be loaded for package handle ${params.handle}`);
    }
    return pkg;
}
