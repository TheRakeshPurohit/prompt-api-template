import { CliUx } from '@oclif/core';
import { PackageVersion } from '@steamship/client';
import { getHandle } from './get-handle.js';
export async function getPackageVersion(params) {
    if (!params.package) {
        CliUx.ux.error('Unable to load package instance - package missing.');
        CliUx.ux.exit(-1);
    }
    const handle = await getHandle({
        provided: params.providedHandle,
        config: params.config,
        type: 'version'
    });
    const versionR = await PackageVersion.get(params.client, {
        packageId: params.package.id,
        handle
    });
    if (!versionR.output) {
        CliUx.ux.error('Unable to load package version.');
        CliUx.ux.exit(-1);
    }
    return versionR.output;
}
const CREATE_FAIL = 'Unable to create new PackageVersion.';
export async function createPackageVersion(params) {
    let version;
    if (!params.package?.id) {
        CliUx.ux.warn(`${CREATE_FAIL} Missing Package ID.`);
        process.exit(0);
    }
    if (!params.deploymentZipLocation) {
        CliUx.ux.warn(`${CREATE_FAIL} Missing deployment ZIP location.`);
        process.exit(0);
    }
    try {
        version = await PackageVersion.create(params.client, {
            packageId: params.package.id,
            filename: params.deploymentZipLocation,
            handle: params.handle,
            configTemplate: params.configTemplate
        });
    }
    catch (e) {
        CliUx.ux.warn(`${CREATE_FAIL} Empty PackageVersion Creation result from server. Have you incremented or changed your package version? \n ${e}`);
        process.exit(0);
    }
    try {
        await version?.wait({ maxTimeoutSeconds: 300 });
    }
    catch (e) {
        CliUx.ux.warn(`${CREATE_FAIL} Deployment failed. \n ${e.statusMessage ?? e.message ?? e}`);
        process.exit(0);
    }
    if (version?.failed()) {
        CliUx.ux.warn(`${CREATE_FAIL} Deployment failed. \n ${version?.statusMessage}`);
        process.exit(0);
    }
    if (!version.output) {
        CliUx.ux.warn(`${CREATE_FAIL} Deployment failed. Empty PackageVersion response on task.`);
        process.exit(0);
    }
    return version.output;
}
