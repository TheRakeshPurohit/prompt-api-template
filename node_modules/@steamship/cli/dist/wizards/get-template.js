import { CliUx } from '@oclif/core';
import { getPluginType } from './get-plugin-type.js';
import { select, selectProject } from './select.js';
const ORGS = {
    PACKAGES: 'https://github.com/steamship-packages',
    PLUGINS: 'https://github.com/steamship-plugins',
    CORE: 'https://github.com/steamship-core'
};
export async function getPackageTemplate() {
    const choices = [
        {
            id: `${ORGS.PACKAGES}/empty-package`,
            name: 'Empty Package',
            description: 'Empty package shell to extend.'
        },
        {
            id: `${ORGS.PACKAGES}/question-answering`,
            name: 'Question Answering Template',
            description: 'Package to manage a question-answering index.'
        }
    ];
    return (await select({ prompt: 'Which starter package?', choices })).id;
}
export async function getPluginTemplate() {
    const pluginType = await getPluginType();
    if (pluginType == 'fileImporter') {
        return `${ORGS.PLUGINS}/file-importer-template`;
    }
    if (pluginType == 'corpusImporter') {
        return `${ORGS.PLUGINS}/corpus-importer-template`;
    }
    if (pluginType == 'corpusExporter') {
        return `${ORGS.PLUGINS}/corpus-exporter-template`;
    }
    if (pluginType == 'blockifier') {
        return `${ORGS.PLUGINS}/blockifier-template`;
    }
    if (pluginType == 'embedder') {
        return `${ORGS.PLUGINS}/embedder-template`;
    }
    if (pluginType == 'tagger') {
        return `${ORGS.PLUGINS}/tagger-template`;
    }
    CliUx.ux.error(`We don't have a starter project for plugin type ${pluginType}`);
}
export async function getProjectTemplate() {
    const choices = [
        {
            id: 'https://github.com/nludb/nludb-examples/examples/notebooks/jupyter-playground',
            name: 'Demo Notebook',
            description: 'A jupyter notebook with demos inside.'
        }
    ];
    return (await select({ prompt: 'Which starter project?', choices })).id;
}
export async function getTemplateWizard(provided) {
    if (typeof provided != 'undefined') {
        return provided;
    }
    const projectType = await selectProject({
        preSelected: provided,
        limitOptions: ['package', 'plugin', 'project'],
        recurse: true,
        limitToPropertyNotNull: 'url'
    });
    if (projectType.url) {
        return projectType.url;
    }
    return projectType.id || '';
}
