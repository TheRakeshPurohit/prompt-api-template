import { CliUx } from '@oclif/core';
import { DEFAULT_CONFIG, saveConfiguration } from '@steamship/client';
import { getAccount } from '../helpers/account-api.js';
import { APP_VERSION, LOGIN_WEB_CLIENT_KEY, LOGIN_WEB_ENDPOINT, LOGIN_WEB_TOKEN_KEY, LOGIN_WEB_VERSION_KEY } from '../helpers/constants.js';
import { initiateLoginFlow, pollLoginAttempt } from '../helpers/login-api.js';
import { attachTrailingSlash, removeTrailingSlash } from '../helpers/url-helpers.js';
function getBrowserUrl(site, loginAttemptToken) {
    return `${site}/${LOGIN_WEB_ENDPOINT}?${LOGIN_WEB_TOKEN_KEY}=${loginAttemptToken}&${LOGIN_WEB_CLIENT_KEY}=cli&${LOGIN_WEB_VERSION_KEY}=${APP_VERSION}`;
}
export function isLoggedIn(config) {
    return typeof config.apiBase != 'undefined' && typeof config.apiKey != 'undefined';
}
export async function doLogin(params) {
    const apiDomain = params.api_domain
        ? attachTrailingSlash(params.api_domain)
        : params.config.apiBase || DEFAULT_CONFIG.apiBase;
    const siteDomain = removeTrailingSlash(params.site_domain ? params.site_domain : params.config.webBase || DEFAULT_CONFIG.webBase);
    let loginAttemptToken = '';
    try {
        loginAttemptToken = await initiateLoginFlow(apiDomain);
    }
    catch (e) {
        CliUx.ux.error(e.message);
    }
    const loginUrl = getBrowserUrl(siteDomain, loginAttemptToken);
    CliUx.ux.log(`Logging into Steamship at ${siteDomain}`);
    try {
        await CliUx.ux.anykey();
    }
    catch (e) {
        CliUx.ux.log('Ending login process. See `ship login --help` for more info.');
        return;
    }
    try {
        await CliUx.ux.open(loginUrl);
    }
    catch (e) {
        CliUx.ux.warn(`Could not launch browser for interactive login.  

    If you are in replit, please make sure you've set the STEAMSHIP_API_KEY secret, and close and reopen this shell.
    
    If you are in a different headless environment, please either set the STEAMSHIP_API_KEY environment variable or configure your .steamship.json.
    More here: https://docs.steamship.com/configuration/authentication.html`);
        process.exit(0);
    }
    CliUx.ux.action.start('Waiting for login via the browser');
    try {
        const credentials = await pollLoginAttempt(apiDomain, loginAttemptToken);
        const toSave = {
            apiBase: apiDomain,
            apiKey: credentials.api_key
        };
        await saveConfiguration(toSave, params.config.profile);
    }
    catch (e) {
        CliUx.ux.action.stop(e.message);
        CliUx.ux.error(e.message);
    }
    try {
        const userInfo = await getAccount();
        CliUx.ux.action.stop(`Logged in! Authenticated as ${userInfo.handle}`);
    }
    catch (e) {
        CliUx.ux.error(`Could not authenticate properly. Error: ${e}`);
    }
}
