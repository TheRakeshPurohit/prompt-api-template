"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiBase = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _axios = _interopRequireDefault(require("axios"));
var _log = _interopRequireDefault(require("./log.js"));
var _Configuration = require("./shared/Configuration.js");
var _steamship_error = require("./steamship_error.js");
var _task2 = require("./task.js");
var _base = require("./types/base.js");
var _utils = require("./utils.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function doFetch(_x, _x2) {
  return _doFetch.apply(this, arguments);
} // async function doFetch(url: any, opts: any): Promise<AxiosResponse> {
//   return new Promise<AxiosResponse>((resolve, reject) => {
//     axios({
//       url,
//       headers: opts.headers,
//       data: opts.body,
//       method: opts.method,
//     }).then(resolve)
//       .catch(
//         (err) => {
//           console.log(err);
//           reject(err);
//         }
//       )
//   })
// }
function _doFetch() {
  _doFetch = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8(url, opts) {
    return _regenerator["default"].wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          return _context8.abrupt("return", (0, _axios["default"])({
            url: url,
            headers: opts.headers,
            data: opts.body,
            method: opts.method
          }));
        case 1:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return _doFetch.apply(this, arguments);
}
var log = (0, _log["default"])('Steamship:ApiBase');
var MAX_BODY_LENGTH = 100000 * 1000;
var _IS_LOCAL = function _IS_LOCAL(base) {
  for (var _i = 0, _arr = ['localhost', '127.0.0.1', '0:0:0:0', ':3000', 'steamship.local', 'host.docker.internal', '/test:', '//app.staging.steamship.com',
    // For the demo user proxy trick - this is the website proxy
    '//app.steamship.com' // For the demo user proxy trick - this is the website proxy
    ]; _i < _arr.length; _i++) {
    var s = _arr[_i];
    if (base.includes(s)) {
      return true;
    }
  }
  return false;
};

/* Should be a FormData object */
function addMultiparts(formData, path, value) {
  /* Decode any object into a series of HTTP Multi-part segments that Vapor will consume.
    https://github.com/vapor/multipart-kit
     When sending a JSON object in a MultiPart request, Vapor wishes to see multi part segments as follows:
    single_key
    array_key[idx]
    obj_key[prop]
     So a File with a list of one tag with kind=Foo would be transmitted as setting the part:
    [tags][0][kind]
  */
  var type = (0, _typeof2["default"])(value);
  if (type == 'string' || type == 'boolean' || type == 'number') {
    formData.append(path, value);
  } else if (Array.isArray(value)) {
    value.forEach(function (subValue, index) {
      addMultiparts(formData, "".concat(path, "[").concat(index, "]"), subValue);
    });
  } else {
    for (var _key in value) {
      addMultiparts(formData, "".concat(path, "[").concat(_key, "]"), value[_key]);
    }
  }
}
var ApiBase = /*#__PURE__*/function () {
  function ApiBase(params) {
    var _this = this;
    (0, _classCallCheck2["default"])(this, ApiBase);
    (0, _defineProperty2["default"])(this, "config", void 0);
    this.config = (0, _Configuration.loadConfiguration)(params).then(function (config) {
      if (config.apiKey) {
        return _this._switchConfigWorkspace({
          workspaceHandle: params === null || params === void 0 ? void 0 : params.workspace,
          failIfWorkspaceExists: (params === null || params === void 0 ? void 0 : params.failIfWorkspaceExists) === true,
          config: config
        });
      } else {
        return config;
      }
    });
  }
  (0, _createClass2["default"])(ApiBase, [{
    key: "switchWorkspace",
    value: function () {
      var _switchWorkspace = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(params) {
        var config;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = this;
              _context.t1 = _objectSpread;
              _context.t2 = _objectSpread({}, params);
              _context.t3 = {};
              _context.next = 6;
              return this.config;
            case 6:
              _context.t4 = _context.sent;
              _context.t5 = {
                config: _context.t4
              };
              _context.t6 = (0, _context.t1)(_context.t2, _context.t3, _context.t5);
              _context.next = 11;
              return _context.t0._switchConfigWorkspace.call(_context.t0, _context.t6);
            case 11:
              config = _context.sent;
              this.config = Promise.resolve(config);
              log.info("Switched to workspace ".concat(config.workspaceHandle, "/").concat(config.workspaceId));
            case 14:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function switchWorkspace(_x3) {
        return _switchWorkspace.apply(this, arguments);
      }
      return switchWorkspace;
    }()
    /*
      Switches this client to the requested workspace, possibly creating it. If all arguments are None, the client
      actively switches into the default workspace.
       - API calls are performed manually to not result in circular imports.
      - Note that the default workspace is technically not necessary for API usage; it will be assumed by the Engine
        in the absense of a Workspace ID or Handle being manually specified in request headers.
     */
  }, {
    key: "_switchConfigWorkspace",
    value: function () {
      var _switchConfigWorkspace2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(params) {
        var workspace, p, oldConfig, activeConfig, returnId, returnHandle;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              workspace = undefined;
              p = _objectSpread({}, params);
              if (!p.workspaceHandle) {
                p.workspaceHandle = 'default';
              }
              if (p.failIfWorkspaceExists) {
                log.info("Creating workspace with handle: ".concat(p.workspaceHandle, "."));
              } else {
                log.info("Creating/Fetching workspace with handle: ".concat(p.workspaceHandle, "."));
              }

              // Zero out the workspace_handle on the config block in case we're being invoked from
              // `init` (otherwise we'll attempt to create the sapce IN that nonexistant workspace)
              oldConfig = params.config;
              activeConfig = _objectSpread(_objectSpread({}, oldConfig), {}, {
                workspaceHandle: undefined,
                workspaceId: undefined
              });
              _context2.next = 8;
              return this.post('workspace/create', {
                handle: p.workspaceHandle,
                fetchIfExists: !(p.failIfWorkspaceExists === true)
              }, {
                responsePath: 'workspace'
              }, activeConfig);
            case 8:
              workspace = _context2.sent;
              if (!(!workspace || !workspace.output)) {
                _context2.next = 11;
                break;
              }
              throw new _steamship_error.SteamshipError({
                statusMessage: 'Was unable to switch to new workspace: server returned empty Workspace.'
              });
            case 11:
              returnId = workspace.output.id;
              returnHandle = workspace.output.handle;
              if (!(!returnHandle || !returnId)) {
                _context2.next = 16;
                break;
              }
              log.error(workspace);
              throw new _steamship_error.SteamshipError({
                statusMessage: "".concat(JSON.stringify(workspace), " Unable to switch to workspace ").concat(p.workspaceHandle, " with failIfWorkspaceExists ").concat(p.failIfWorkspaceExists, ": server returned empty ID and Handle.")
              });
            case 16:
              return _context2.abrupt("return", _objectSpread(_objectSpread({}, oldConfig), {}, {
                workspaceHandle: returnHandle,
                workspaceId: returnId
              }));
            case 17:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function _switchConfigWorkspace(_x4) {
        return _switchConfigWorkspace2.apply(this, arguments);
      }
      return _switchConfigWorkspace;
    }()
  }, {
    key: "_headers",
    value: function _headers(config, postConfig) {
      var ret = {
        'Content-Type': 'application/json',
        Authorization: "Bearer ".concat(config.apiKey)
      };
      if (postConfig !== null && postConfig !== void 0 && postConfig.workspaceId) {
        ret['X-Workspace-Id'] = postConfig === null || postConfig === void 0 ? void 0 : postConfig.workspaceId;
      } else if (config.workspaceId) {
        ret['X-Workspace-Id'] = config.workspaceId;
      } else if (config.workspaceHandle) {
        ret['X-Workspace-Handle'] = config.workspaceHandle;
      }
      if ((postConfig === null || postConfig === void 0 ? void 0 : postConfig.isPackageCall) === true) {
        if (postConfig !== null && postConfig !== void 0 && postConfig.packageOwner) {
          ret['X-Package-Owner-Handle'] = postConfig.packageOwner;
        }
        if (postConfig !== null && postConfig !== void 0 && postConfig.packageId) {
          ret['X-Package-Id'] = postConfig.packageId;
        }
        if (postConfig !== null && postConfig !== void 0 && postConfig.packageInstanceId) {
          ret['X-Package-Instance-Id'] = postConfig.packageInstanceId;
        }
      }
      if ((postConfig === null || postConfig === void 0 ? void 0 : postConfig.asBackgroundTask) === true) {
        // Will result in the engine persisting the inbound HTTP request as a Task for deferred
        // execution. The client will receive task information back instead of the synchronous API response.
        // That task can be polled for eventual completion.
        ret['X-Task-Background'] = 'true';
      }
      return ret;
    }
  }, {
    key: "_url",
    value: function _url(baseConfig, postConfig, operation) {
      var base = '';
      if (!((postConfig === null || postConfig === void 0 ? void 0 : postConfig.isPackageCall) === true)) {
        // It's an API call
        base = (postConfig === null || postConfig === void 0 ? void 0 : postConfig.apiBase) || baseConfig.apiBase;
      } else {
        // It's a package call
        if (!(postConfig !== null && postConfig !== void 0 && postConfig.packageOwner)) {
          throw new _steamship_error.SteamshipError({
            statusCode: 'UserMissing',
            statusMessage: "Can not invoke an package endpoint without the package owner's user handle.",
            statusSuggestion: 'Provide the packageOwner option, or initialize your package with a lookup.'
          });
        }
        base = (postConfig === null || postConfig === void 0 ? void 0 : postConfig.appBase) || baseConfig.appBase;
        if (!base) {
          throw new _steamship_error.SteamshipError({
            statusCode: 'EndpointMissing',
            statusMessage: 'Can not invoke an package endpoint without the App Base variable set.',
            statusSuggestion: 'This should automatically have a good default setting. Reach out to our Steamship support.'
          });
        }
        if (!_IS_LOCAL(base)) {
          // Rewrite the base to be https://user.base
          var parts = base.split('//');
          if (parts.length < 2) {
            throw new _steamship_error.SteamshipError({
              statusCode: 'EndpointInvalid',
              statusMessage: 'You package base did not appear to begin with a valid HTTP or HTTPS protocol.',
              statusSuggestion: "Make sure you've provided an app base such as https://steamship.run, with the protocol."
            });
          }
          // Now we pre-pend the app-base to the first part!
          parts[1] = "".concat(postConfig === null || postConfig === void 0 ? void 0 : postConfig.packageOwner, ".").concat(parts[1]);
          base = parts.join('//');
        }
      }

      // Guard against a double // after the domain

      if (base && base[base.length - 1] == '/') {
        base = base.slice(0, base.length - 1);
      }
      if (operation && operation[0] == '/') {
        operation = operation.slice(1);
      }
      return "".concat(base, "/").concat(operation);
    }
  }, {
    key: "post",
    value: function () {
      var _post = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(operation, payload, config, overrideConfig) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.call('POST', operation, payload, config, overrideConfig));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function post(_x5, _x6, _x7, _x8) {
        return _post.apply(this, arguments);
      }
      return post;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(operation, payload, config) {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this.call('GET', operation, payload, config));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function get(_x9, _x10, _x11) {
        return _get.apply(this, arguments);
      }
      return get;
    }()
  }, {
    key: "_makeError",
    value: function () {
      var _makeError2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(_ref) {
        var error, response, task, j;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              error = _ref.error, response = _ref.response, task = _ref.task;
              if (!error) {
                _context5.next = 5;
                break;
              }
              return _context5.abrupt("return", error);
            case 5:
              if (!response) {
                _context5.next = 20;
                break;
              }
              _context5.prev = 6;
              _context5.next = 9;
              return response.data;
            case 9:
              j = _context5.sent;
              if (!j.status) {
                _context5.next = 12;
                break;
              }
              return _context5.abrupt("return", new _steamship_error.SteamshipError({
                statusMessage: j.status.statusMessage,
                statusCode: j.status.statusCode,
                statusSuggestion: j.status.statusSuggestion
              }));
            case 12:
              _context5.next = 17;
              break;
            case 14:
              _context5.prev = 14;
              _context5.t0 = _context5["catch"](6);
              return _context5.abrupt("return", new _steamship_error.SteamshipError({
                statusMessage: 'Bad response from server'
              }));
            case 17:
              return _context5.abrupt("return", new _steamship_error.SteamshipError({
                statusMessage: 'Bad response from server'
              }));
            case 20:
              if (!task) {
                _context5.next = 22;
                break;
              }
              return _context5.abrupt("return", new _steamship_error.SteamshipError({
                statusMessage: task.statusMessage,
                statusCode: task.statusCode,
                statusSuggestion: task.statusSuggestion
              }));
            case 22:
              return _context5.abrupt("return", new _steamship_error.SteamshipError({
                statusMessage: 'Bad response'
              }));
            case 23:
            case "end":
              return _context5.stop();
          }
        }, _callee5, null, [[6, 14]]);
      }));
      function _makeError(_x12) {
        return _makeError2.apply(this, arguments);
      }
      return _makeError;
    }()
  }, {
    key: "_makeResponse",
    value: function () {
      var _makeResponse2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(_ref2) {
        var _json, _json2;
        var response, rawResponse, objectConstructor, responsePath, err, json, taskParams, task, _task;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              response = _ref2.response, rawResponse = _ref2.rawResponse, objectConstructor = _ref2.objectConstructor, responsePath = _ref2.responsePath;
              if (response) {
                _context6.next = 3;
                break;
              }
              throw new _steamship_error.SteamshipError({
                statusMessage: 'No response.'
              });
            case 3:
              if (!(response.status != 200)) {
                _context6.next = 8;
                break;
              }
              _context6.next = 6;
              return this._makeError({
                response: response
              });
            case 6:
              err = _context6.sent;
              throw err;
            case 8:
              if (!rawResponse) {
                _context6.next = 10;
                break;
              }
              return _context6.abrupt("return", response);
            case 10:
              _context6.prev = 10;
              json = response.data; // Axios
              // json = JSON.parse((response as any).body); // Got
              // json = await response.json(); // for the fetch style // Fetch
              _context6.next = 19;
              break;
            case 14:
              _context6.prev = 14;
              _context6.t0 = _context6["catch"](10);
              _context6.next = 18;
              return this._makeError({
                error: _context6.t0
              });
            case 18:
              throw _context6.sent;
            case 19:
              if (!(typeof json == 'undefined' || json == null)) {
                _context6.next = 21;
                break;
              }
              throw new _steamship_error.SteamshipError({
                statusMessage: 'Empty response.'
              });
            case 21:
              taskParams = (_json = json) === null || _json === void 0 ? void 0 : _json.status;
              if (!(typeof (taskParams === null || taskParams === void 0 ? void 0 : taskParams.state) != 'undefined')) {
                _context6.next = 30;
                break;
              }
              task = new _task2.Task(this, _objectSpread(_objectSpread({}, taskParams), {}, {
                responsePath: responsePath,
                rawResponse: rawResponse,
                objectConstructor: objectConstructor
              }));
              if (!(((_task = task) === null || _task === void 0 ? void 0 : _task.state) == _base.TaskState.failed)) {
                _context6.next = 28;
                break;
              }
              _context6.next = 27;
              return this._makeError({
                task: task
              });
            case 27:
              throw _context6.sent;
            case 28:
              _context6.next = 31;
              break;
            case 30:
              task = new _task2.Task(this, {
                responsePath: responsePath,
                rawResponse: rawResponse,
                objectConstructor: objectConstructor
              });
            case 31:
              task.setData((_json2 = json) === null || _json2 === void 0 ? void 0 : _json2.data);
              return _context6.abrupt("return", task);
            case 33:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this, [[10, 14]]);
      }));
      function _makeResponse(_x13) {
        return _makeResponse2.apply(this, arguments);
      }
      return _makeResponse;
    }()
  }, {
    key: "call",
    value: function () {
      var _call = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(verb, operation, payload, config, overrideConfig) {
        var baseConfig, url, headers, reqConfig, finalPayload, contentType, FormDataNode, formData, pp, _i2, _Object$keys, _key2, value, _formData, _pp, _i3, _Object$keys2, _key3, _value, resp;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.t0 = overrideConfig;
              if (_context7.t0) {
                _context7.next = 5;
                break;
              }
              _context7.next = 4;
              return this.config;
            case 4:
              _context7.t0 = _context7.sent;
            case 5:
              baseConfig = _context7.t0;
              if (baseConfig.apiKey) {
                _context7.next = 8;
                break;
              }
              throw new _steamship_error.SteamshipError({
                statusCode: 'Authentication',
                statusMessage: 'API Key not found.',
                statusSuggestion: 'Please see docs.steamship.com for a variety of ways to set your API key.'
              });
            case 8:
              url = this._url(baseConfig, config, operation);
              headers = this._headers(baseConfig, config);
              reqConfig = {
                headers: headers,
                maxContentLength: MAX_BODY_LENGTH,
                maxBodyLength: MAX_BODY_LENGTH
              };
              finalPayload = undefined;
              if (!(verb == 'POST' && config !== null && config !== void 0 && config.file)) {
                _context7.next = 35;
                break;
              }
              contentType = undefined;
              if (typeof config.file != 'string') {
                contentType = 'binary/octet-stream';
              }

              // Important so proper boundary can be set;
              delete reqConfig.headers['Content-Type'];
              if (!(0, _utils.isNode)()) {
                _context7.next = 28;
                break;
              }
              _context7.next = 19;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('form-data'));
              });
            case 19:
              FormDataNode = _context7.sent;
              formData = new FormDataNode["default"]();
              formData.append('file', Buffer.from(config.file), {
                filename: config === null || config === void 0 ? void 0 : config.filename,
                contentType: contentType
              });
              pp = payload;
              for (_i2 = 0, _Object$keys = Object.keys(pp); _i2 < _Object$keys.length; _i2++) {
                _key2 = _Object$keys[_i2];
                value = pp[_key2];
                addMultiparts(formData, _key2, value);
              }
              finalPayload = formData;

              // This only needs to happen on Node.
              // And the .getHeaders method is unavilabile in the browser.
              // NOTE: This is untested in the unit tests; it will show up as a failure in the browser.
              // TODO: We need to start running tests inside a browser runtime too.
              reqConfig.headers = _objectSpread(_objectSpread({}, reqConfig.headers), formData.getHeaders());
              _context7.next = 33;
              break;
            case 28:
              _formData = new FormData();
              /*
               * The config.file as any cast below is because FormData does not support Buffer.
               * In general, file as a Buffer should only be done from within the NodeJS environment,
               * not from within the browser. In the browser, Blob should be used instead.
               *
               * TODO: Figure out if there's a way to strongly type (or at least runtime check) this
               * so that we get back intelligent errors that are environment-dependent.
               */
              _formData.append('file', config.file, config === null || config === void 0 ? void 0 : config.filename);
              _pp = payload;
              for (_i3 = 0, _Object$keys2 = Object.keys(_pp); _i3 < _Object$keys2.length; _i3++) {
                _key3 = _Object$keys2[_i3];
                _value = _pp[_key3];
                addMultiparts(_formData, _key3, _value);
              }
              finalPayload = _formData;
            case 33:
              _context7.next = 36;
              break;
            case 35:
              if ((0, _typeof2["default"])(payload) == 'object') {
                finalPayload = JSON.stringify(payload);
              } else {
                finalPayload = payload;
              }
            case 36:
              _context7.prev = 36;
              if (!(verb == 'POST')) {
                _context7.next = 43;
                break;
              }
              _context7.next = 40;
              return doFetch(url, {
                method: verb,
                body: finalPayload,
                headers: reqConfig.headers
              });
            case 40:
              resp = _context7.sent;
              _context7.next = 51;
              break;
            case 43:
              if (!(verb == 'GET')) {
                _context7.next = 50;
                break;
              }
              // TODO: Incorporate params into the query string
              if (payload) {
                url = url + '?' + new URLSearchParams(payload);
              }
              _context7.next = 47;
              return doFetch(url, {
                method: verb,
                headers: reqConfig.headers
              });
            case 47:
              resp = _context7.sent;
              _context7.next = 51;
              break;
            case 50:
              throw new _steamship_error.SteamshipError({
                statusMessage: "Unsupported HTTP Verb: ".concat(verb)
              });
            case 51:
              _context7.next = 56;
              break;
            case 53:
              _context7.prev = 53;
              _context7.t1 = _context7["catch"](36);
              throw this._makeError({
                error: _context7.t1
              });
            case 56:
              return _context7.abrupt("return", this._makeResponse({
                response: resp,
                rawResponse: config === null || config === void 0 ? void 0 : config.rawResponse,
                objectConstructor: config === null || config === void 0 ? void 0 : config.expect,
                responsePath: config === null || config === void 0 ? void 0 : config.responsePath
              }));
            case 57:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this, [[36, 53]]);
      }));
      function call(_x14, _x15, _x16, _x17, _x18) {
        return _call.apply(this, arguments);
      }
      return call;
    }()
  }]);
  return ApiBase;
}();
exports.ApiBase = ApiBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,